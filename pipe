pipeline {
    agent any

    environment {
        TEXT = 'TEXT'
        DOUBLE_TEXT = "Text do ${TEXT}"
        REPORTS_FOLDER = 'reports'
    }

    stages {
        stage('Begin') {
            steps {
                script {
                    echo 'Iniciando o pipeline'
                    currentBuild.description = env.STAGE_NAME

                    echo "Stage Name : ${env.STAGE_NAME}"
                    echo "Build Number : ${env.BUILD_NUMBER}"
                    echo "My text: ${env.TEXT}"
                    echo "My double text: ${env.DOUBLE_TEXT}"
                    def textNow = ''
                    textNow = "Agora Ã© ${env.TEXT} + ${env.DOUBLE_TEXT}"
                    echo textNow

                    sh "rm -rf ${REPORTS_FOLDER}/*"
                }
            }
        }

        stage('Full Testing') {
            options {
                lock('ios-device')
            }
            stages {
                stage('Install') {
                    steps {
                        echo 'Installing'
                    // sleep(time: 2, unit: 'SECONDS')
                    }
                }
                stage('Test') {
                    steps {
                        echo 'Testing'
                    // sleep(time: 2, unit: 'SECONDS')
                    }
                }
            }
        }

        stage('Report') {
            steps {
                archiveArtifacts(
                    artifacts: 'results.xml',
                    onlyIfSuccessful: true
                )
                script {
                    sh "mkdir -p ${REPORTS_FOLDER}"
                }
            }
        }
    }

    post {
        success {
            script {
                junitTest()
                echo 'Build is successful!'
            }
        }
        unstable {
            script {
                failedTestReports()
                echo 'Build is unstable!'
            }
        }
        failure {
            script {
                echo 'Build failed!'
            }
        }
        always {
            script {
                echo 'Build is finished!'
            }
        }
    }
}

def junitTest() {
    def testResultFile = 'results.xml'
    if (fileExists(testResultFile)) {
        echo 'Test result found!'
        def testResult = junit(
            testResults: testResultFile,
            skipPublishingChecks: true,
            skipOldReports: true,
        )
        def total = testResult.totalCount
        def passed = testResult.passCount
        def failed = testResult.failCount

        def echoMessage = "Total: ${total}\n- Passed: ${passed}\n- Failed: ${failed}"
        echo "${echoMessage}\n"

        echo 'All tests passed!'
    } else {
        echo 'No test result found! on junit standard from Jenkins Pipeline'
    }
}

def failedTestReports() {
    def testAction = currentBuild.rawBuild.getAction(hudson.tasks.junit.TestResultAction)
    if (testAction != null) {
        def failedTests = testAction.getResult().getFailedTests()

        if (failedTests.size() > 0) {
            def failedTestsReportText = '*Start of Tests Report*\n'
            for (def test in failedTests) {
                failedTestsReportText = "${failedTestsReportText}> Falha no Teste:\n${test.getFullName()}\nErro: ${test.getErrorDetails()}\nStack Trace: \n${test.getErrorStackTrace()}\n"
            }
            testAction = null

            failedTestsReportText = "${failedTestsReportText}*End of Tests report*"

            echo failedTestsReportText

            echo 'Salvando log de falhas...'

            def testResultReportFile = "${env.JOB_NAME}_#${env.BUILD_NUMBER}_test_result_report.txt"
            def testResultReportPath = "${REPORTS_FOLDER}/${testResultReportFile}"
            writeFile(file: testResultReportPath, text: failedTestsReportText)
            echo "Log de falhas salvo em ${testResultReportPath}"
        } else {
            echo 'No failed tests found!'
        }
    } else {
        echo 'No tests result found! on currentBuild.rawBuild.getAction(hudson.tasks.junit.TestResultAction) method'
    }
}
